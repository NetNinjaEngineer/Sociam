// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sociam.Infrastructure.Persistence;

#nullable disable

namespace Sociam.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250202124155_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "BE3B9D48-68F5-42E3-9371-E7964F96A25D",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "702C7401-F83C-4684-9421-9AA74FC40050",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "702C7401-F83C-4684-9421-9AA74FC40050",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "3EB45CDA-F2EE-43E7-B9F1-D52562E05929",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "9818FAE0-A167-4808-A30D-BC7418A53CB0",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "FE2FB445-6562-49DD-B0A3-77E0A3A1C376",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "5B91855C-2D98-4E2B-B919-CDE322C9002D",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "5326BB55-A26F-47FE-ABC4-9DF44F7B0333",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "B3945AB7-1F46-4829-9DEA-6860E283582F",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "3944C201-0184-4F97-83A6-B6E4852C961F",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "0A9232F3-BC6D-4610-AAFF-F1032831E847",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "049759F5-3AD8-46BF-89EE-AC51F3BEED88",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AttachmentSize")
                        .HasColumnType("bigint");

                    b.Property<string>("AttachmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastMessageAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FriendshipStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Friendships", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupPrivacy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("CodeExpiration")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "702C7401-F83C-4684-9421-9AA74FC40050",
                            AccessFailedCount = 0,
                            Bio = "Software Developer and Tech Enthusiast.",
                            ConcurrencyStamp = "f534aafc-9741-4334-a139-3434e567c7b4",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 53, 146, DateTimeKind.Unspecified).AddTicks(1133), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2002, 1, 1),
                            Email = "me5260287@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            LastName = "Ehab",
                            LockoutEnabled = false,
                            NormalizedEmail = "ME5260287@GMAIL.COM",
                            NormalizedUserName = "MOEHAB@2002",
                            PasswordHash = "AQAAAAIAAYagAAAAEHD9TRMieDJHQ5pihfHG1cUjpqF8rphit8+yBZJc8iTpyt2nHBKEfyc++NtMl2FZCA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60e58b8b-189f-4a5c-a9e5-a76915510397",
                            TwoFactorEnabled = false,
                            UserName = "Moehab@2002"
                        },
                        new
                        {
                            Id = "3EB45CDA-F2EE-43E7-B9F1-D52562E05929",
                            AccessFailedCount = 0,
                            Bio = "Loves hiking and photography.",
                            ConcurrencyStamp = "a6f19b7f-e01f-4d5e-8fef-2cfb9706477f",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 53, 260, DateTimeKind.Unspecified).AddTicks(4306), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1990, 5, 15),
                            Email = "johndoe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            Gender = "Male",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHNDOE@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOYdsGDVRdde2mZ3LyIhMnwdjXEiTXhX8FxEzFV9UdZaMhwBD0FExJCcLSQratEG7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ccc3fbb-936d-4423-884e-ceffb9afdb4c",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe@123"
                        },
                        new
                        {
                            Id = "9818FAE0-A167-4808-A30D-BC7418A53CB0",
                            AccessFailedCount = 0,
                            Bio = "Passionate about art and design.",
                            ConcurrencyStamp = "9cdf3de5-79c8-42f5-90f6-0a32779db2c1",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 53, 355, DateTimeKind.Unspecified).AddTicks(7621), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1985, 8, 22),
                            Email = "janesmith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            Gender = "Female",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANESMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANESMITH@456",
                            PasswordHash = "AQAAAAIAAYagAAAAED/Ul1n/F+Ip0ShNrsyfz33utBCKUBW0uXeAzeUny3PQRmHyMXbOSjMZ7lIhl1uu/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ff1d34f-1441-48b8-bd3a-ff89ed8b3f05",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith@456"
                        },
                        new
                        {
                            Id = "FE2FB445-6562-49DD-B0A3-77E0A3A1C376",
                            AccessFailedCount = 0,
                            Bio = "Travel enthusiast and foodie.",
                            ConcurrencyStamp = "8a2bd6ee-a57f-453e-9339-744ba564d720",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 53, 449, DateTimeKind.Unspecified).AddTicks(150), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1995, 3, 10),
                            Email = "alicej@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            Gender = "Female",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICEJ@EXAMPLE.COM",
                            NormalizedUserName = "ALICEJ@789",
                            PasswordHash = "AQAAAAIAAYagAAAAEOw8FR8bHztK48YPVbuaRLMDlZFFufdW6y2EuLHS37/y1EsjW5dF7AWYGBruF8ex8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45d0de0b-974e-4e15-a168-d968afd1d1ec",
                            TwoFactorEnabled = false,
                            UserName = "AliceJ@789"
                        },
                        new
                        {
                            Id = "0821819C-64AE-4C73-96F2-4E607AA59D7E",
                            AccessFailedCount = 0,
                            Bio = "Tech entrepreneur and mentor.",
                            ConcurrencyStamp = "4cd7e7e0-6923-4eba-b5cd-d1e7e36dcbb5",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 53, 541, DateTimeKind.Unspecified).AddTicks(4698), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1980, 12, 5),
                            Email = "bobbrown@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            Gender = "Male",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBROWN@EXAMPLE.COM",
                            NormalizedUserName = "BOBBROWN@101",
                            PasswordHash = "AQAAAAIAAYagAAAAEEJ2xcFD0y9uaOUdg1w2vqDB0MyHR/ecvs8a7AfonPn4PXDUWNW89I4qazMAA46xSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0e4391e-8039-4914-bef8-925faa7edef4",
                            TwoFactorEnabled = false,
                            UserName = "BobBrown@101"
                        },
                        new
                        {
                            Id = "5B91855C-2D98-4E2B-B919-CDE322C9002D",
                            AccessFailedCount = 0,
                            Bio = "Fitness trainer and health coach.",
                            ConcurrencyStamp = "3203e52a-a40a-4b3c-9901-c20b097df17b",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 53, 633, DateTimeKind.Unspecified).AddTicks(9721), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1992, 7, 18),
                            Email = "emilyd@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            Gender = "Female",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILYD@EXAMPLE.COM",
                            NormalizedUserName = "EMILYD@202",
                            PasswordHash = "AQAAAAIAAYagAAAAEJXmycowuJCVGXYVo9NqFEMTt1iPMGplWv97q3FQLe07xdwg05pHE96wWvbqG9FCQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51a48068-14ac-4912-8674-263028ad15b6",
                            TwoFactorEnabled = false,
                            UserName = "EmilyD@202"
                        },
                        new
                        {
                            Id = "5326BB55-A26F-47FE-ABC4-9DF44F7B0333",
                            AccessFailedCount = 0,
                            Bio = "Musician and songwriter.",
                            ConcurrencyStamp = "7adff7e3-f6de-46c9-8793-7d3a5a889bf2",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 53, 738, DateTimeKind.Unspecified).AddTicks(1062), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1988, 9, 25),
                            Email = "michaelw@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            Gender = "Male",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAELW@EXAMPLE.COM",
                            NormalizedUserName = "MICHAELW@303",
                            PasswordHash = "AQAAAAIAAYagAAAAEHJh3JIUifpan82M1WGG9VIzr4MWMNxUQA602ivAv3ehOywgWc9RdX6nlDdssZvr5A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1162f4f8-9fc0-482f-87d2-6a3569b159a2",
                            TwoFactorEnabled = false,
                            UserName = "MichaelW@303"
                        },
                        new
                        {
                            Id = "B3945AB7-1F46-4829-9DEA-6860E283582F",
                            AccessFailedCount = 0,
                            Bio = "Book lover and aspiring writer.",
                            ConcurrencyStamp = "4059761e-f3b3-418c-b9f3-24ff2a7b221e",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 53, 841, DateTimeKind.Unspecified).AddTicks(9455), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1998, 4, 30),
                            Email = "sarahm@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            Gender = "Female",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAHM@EXAMPLE.COM",
                            NormalizedUserName = "SARAHM@404",
                            PasswordHash = "AQAAAAIAAYagAAAAECDw/0ECh3+1ntnIgNcphAPHtyq1grFEaz3MGcPvDzTxW8yrQ/r8zgg/Qyrev9KLvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "474816be-c608-4e33-92cf-6332e2230cdd",
                            TwoFactorEnabled = false,
                            UserName = "SarahM@404"
                        },
                        new
                        {
                            Id = "3944C201-0184-4F97-83A6-B6E4852C961F",
                            AccessFailedCount = 0,
                            Bio = "History buff and teacher.",
                            ConcurrencyStamp = "4940f5ff-5139-4888-a2cc-cae6105afd29",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 53, 935, DateTimeKind.Unspecified).AddTicks(7828), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1975, 11, 12),
                            Email = "davidm@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            Gender = "Male",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVIDM@EXAMPLE.COM",
                            NormalizedUserName = "DAVIDM@505",
                            PasswordHash = "AQAAAAIAAYagAAAAEPD6oZ53o89mVqmRZMmKnvlw7qCoFyc4OGIxbmufkMoBDmhucUKnXsC/8GTMRPPVqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86b683a7-2b08-45f6-8b39-094078501b89",
                            TwoFactorEnabled = false,
                            UserName = "DavidM@505"
                        },
                        new
                        {
                            Id = "0A9232F3-BC6D-4610-AAFF-F1032831E847",
                            AccessFailedCount = 0,
                            Bio = "Nature lover and environmentalist.",
                            ConcurrencyStamp = "968a08cc-d3ce-402c-94d9-62e0bbe5e7f9",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 54, 28, DateTimeKind.Unspecified).AddTicks(6682), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1990, 6, 20),
                            Email = "laurat@example.com",
                            EmailConfirmed = true,
                            FirstName = "Laura",
                            Gender = "Female",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAURAT@EXAMPLE.COM",
                            NormalizedUserName = "LAURAT@606",
                            PasswordHash = "AQAAAAIAAYagAAAAEGktEu5LLabSWtkhvwqgzrTSslkPqcKxupWvr/v7VV7UyQF+egf6srW8VdQYicxWnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5a19fe9-c559-4009-917e-eb1a4a4b5a97",
                            TwoFactorEnabled = false,
                            UserName = "LauraT@606"
                        },
                        new
                        {
                            Id = "049759F5-3AD8-46BF-89EE-AC51F3BEED88",
                            AccessFailedCount = 0,
                            Bio = "Gamer and tech enthusiast.",
                            ConcurrencyStamp = "53dc931c-f08c-4fe7-a280-92503bd27a55",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 2, 2, 14, 41, 54, 120, DateTimeKind.Unspecified).AddTicks(9221), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1985, 2, 14),
                            Email = "chrisa@example.com",
                            EmailConfirmed = true,
                            FirstName = "Chris",
                            Gender = "Male",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRISA@EXAMPLE.COM",
                            NormalizedUserName = "CHRISA@707",
                            PasswordHash = "AQAAAAIAAYagAAAAEKgOCQg9Cp8PtrRAgcQH4VHUww4ldlcwlcTbRAoZJL00BWq5/XcaK1G/Ciu8w8u5Pw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e302437-fda0-4927-8b80-e24fd25d06ea",
                            TwoFactorEnabled = false,
                            UserName = "ChrisA@707"
                        });
                });

            modelBuilder.Entity("Sociam.Domain.Entities.JoinGroupRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("RequestedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RequestorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RequestorId");

                    b.ToTable("JoinGroupRequests", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.LiveStream", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsLive")
                        .HasColumnType("bit");

                    b.Property<string>("RecordingUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViewerCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LiveStreams");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("GroupConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<string>("MessageStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PrivateConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ReadedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("GroupConversationId");

                    b.HasIndex("PrivateConversationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageMention", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MentionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentionedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MentionedUserId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageMentions", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReactions", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageReply", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("EditedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<Guid>("OriginalMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RepliedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReplyStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("OriginalMessageId");

                    b.HasIndex("ParentReplyId");

                    b.HasIndex("RepliedById");

                    b.ToTable("MessageReplies", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Story", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StoryPrivacy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoryType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR(5)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stories", (string)null);

                    b.HasDiscriminator<string>("StoryType").HasValue("Story");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTimeOffset>("CommentedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CommentedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentedById");

                    b.HasIndex("StoryId");

                    b.ToTable("StoryComment");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("ReactedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReactedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReactedById");

                    b.HasIndex("StoryId");

                    b.ToTable("StoryReaction");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("StoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ViewedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ViewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ViewerId");

                    b.HasIndex("StoryId", "ViewerId")
                        .IsUnique()
                        .HasFilter("[StoryId] IS NOT NULL");

                    b.ToTable("StoryViews", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.UserFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("FollowedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FollowedUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowerUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FollowedUserId");

                    b.HasIndex("FollowerUserId");

                    b.ToTable("UserFollowers");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.GroupConversation", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Conversation");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupConversations");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PrivateConversation", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Conversation");

                    b.Property<string>("ReceiverUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId", "ReceiverUserId")
                        .IsUnique()
                        .HasFilter("[SenderUserId] IS NOT NULL AND [ReceiverUserId] IS NOT NULL");

                    b.ToTable("PrivateConversations");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MediaStory", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Story");

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MediaType")
                        .HasColumnType("VARCHAR");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.HasDiscriminator().HasValue("media");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.TextStory", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Story");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashTags")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("text");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Friendship", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Receiver")
                        .WithMany("FriendshipsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Requester")
                        .WithMany("FriendshipsRequested")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Group", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "CreatedByUser")
                        .WithOne()
                        .HasForeignKey("Sociam.Domain.Entities.Group", "CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.GroupMember", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "AddedBy")
                        .WithOne()
                        .HasForeignKey("Sociam.Domain.Entities.GroupMember", "AddedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("Sociam.Domain.Entities.GroupMember", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.OwnsMany("Sociam.Domain.Entities.Identity.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("ExpiresOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset?>("RevokedOn")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.JoinGroupRequest", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Group", "Group")
                        .WithMany("JoinGroupRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Requestor")
                        .WithMany("JoinGroupRequests")
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.LiveStream", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("LiveStreams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Message", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.GroupConversation", "GroupConversation")
                        .WithMany("Messages")
                        .HasForeignKey("GroupConversationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sociam.Domain.Entities.PrivateConversation", "PrivateConversation")
                        .WithMany("Messages")
                        .HasForeignKey("PrivateConversationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Receiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GroupConversation");

                    b.Navigation("PrivateConversation");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageMention", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "MentionedUser")
                        .WithMany()
                        .HasForeignKey("MentionedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Message", "Message")
                        .WithMany("Mentions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentionedUser");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageReaction", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageReply", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Message", "OriginalMessage")
                        .WithMany("Replies")
                        .HasForeignKey("OriginalMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.MessageReply", "ParentReply")
                        .WithMany("ChildReplies")
                        .HasForeignKey("ParentReplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "RepliedBy")
                        .WithMany()
                        .HasForeignKey("RepliedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalMessage");

                    b.Navigation("ParentReply");

                    b.Navigation("RepliedBy");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Story", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Stories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryComment", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "CommentedBy")
                        .WithMany()
                        .HasForeignKey("CommentedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Story", "Story")
                        .WithMany("StoryComments")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentedBy");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryReaction", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "ReactedBy")
                        .WithMany()
                        .HasForeignKey("ReactedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Story", "Story")
                        .WithMany("StoryReactions")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReactedBy");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryView", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Story", "Story")
                        .WithMany("StoryViewers")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Viewer")
                        .WithMany("ViewedStories")
                        .HasForeignKey("ViewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("Viewer");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.UserFollower", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "FollowedUser")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "FollowerUser")
                        .WithMany("Following")
                        .HasForeignKey("FollowerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("FollowerUser");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.GroupConversation", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Group", "Group")
                        .WithMany("GroupConversations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PrivateConversation", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "ReceiverUser")
                        .WithMany("PrivateConversationsReceived")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "SenderUser")
                        .WithMany("PrivateConversationsSent")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupConversations");

                    b.Navigation("JoinGroupRequests");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("FriendshipsReceived");

                    b.Navigation("FriendshipsRequested");

                    b.Navigation("JoinGroupRequests");

                    b.Navigation("LiveStreams");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("PrivateConversationsReceived");

                    b.Navigation("PrivateConversationsSent");

                    b.Navigation("Stories");

                    b.Navigation("ViewedStories");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Mentions");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageReply", b =>
                {
                    b.Navigation("ChildReplies");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Story", b =>
                {
                    b.Navigation("StoryComments");

                    b.Navigation("StoryReactions");

                    b.Navigation("StoryViewers");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.GroupConversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PrivateConversation", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
