// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sociam.Infrastructure.Persistence;

#nullable disable

namespace Sociam.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250412101214_AddedAssetIdAndPublicIdToPostMediaEntity")]
    partial class AddedAssetIdAndPublicIdToPostMediaEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "BE3B9D48-68F5-42E3-9371-E7964F96A25D",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "702C7401-F83C-4684-9421-9AA74FC40050",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "702C7401-F83C-4684-9421-9AA74FC40050",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "83DFC31A-11E5-4AD3-955D-10766FCAA955",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "83DFC31A-11E5-4AD3-955D-10766FCAA955",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "3EB45CDA-F2EE-43E7-B9F1-D52562E05929",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "9818FAE0-A167-4808-A30D-BC7418A53CB0",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "FE2FB445-6562-49DD-B0A3-77E0A3A1C376",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "5B91855C-2D98-4E2B-B919-CDE322C9002D",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        },
                        new
                        {
                            UserId = "5326BB55-A26F-47FE-ABC4-9DF44F7B0333",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "B3945AB7-1F46-4829-9DEA-6860E283582F",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "3944C201-0184-4F97-83A6-B6E4852C961F",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "0A9232F3-BC6D-4610-AAFF-F1032831E847",
                            RoleId = "25801C14-CBA0-4E74-8F6A-9AA57BA5A57F"
                        },
                        new
                        {
                            UserId = "049759F5-3AD8-46BF-89EE-AC51F3BEED88",
                            RoleId = "BE3B9D48-68F5-42E3-9371-E7964F96A25D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<long>("AttachmentSize")
                        .HasColumnType("bigint");

                    b.Property<string>("AttachmentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ConversationType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastMessageAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Conversations");

                    b.HasDiscriminator<string>("ConversationType").HasValue("Conversation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Friendship", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FriendshipStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Friendships", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GroupPrivacy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PictureName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CodeExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CoverPhotoUrl")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DeviceVerificationCode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("DeviceVerificationExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastKnownIp")
                        .HasColumnType("text");

                    b.Property<string>("LastKnownLocation")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "702C7401-F83C-4684-9421-9AA74FC40050",
                            AccessFailedCount = 0,
                            Bio = "Software Developer and Tech Enthusiast.",
                            ConcurrencyStamp = "075061c5-dd85-473f-add5-9f691892ed1b",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 11, 487, DateTimeKind.Unspecified).AddTicks(7402), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2002, 1, 1),
                            Email = "me5260287@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            LastName = "Ehab",
                            LockoutEnabled = false,
                            NormalizedEmail = "ME5260287@GMAIL.COM",
                            NormalizedUserName = "MOEHAB@2002",
                            PasswordHash = "AQAAAAIAAYagAAAAEItEkkUE6KGiKLQAxNYU5yTa3tc5PTjfbfDnTuAih0feSKPqjJDvo81jkYfWrpNFLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e775a676-7aa9-4320-9165-382cc6adeb87",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "Moehab@2002"
                        },
                        new
                        {
                            Id = "83DFC31A-11E5-4AD3-955D-10766FCAA955",
                            AccessFailedCount = 0,
                            Bio = "Software Developer and Tech Enthusiast.",
                            ConcurrencyStamp = "c54c998b-33b1-4b03-8d14-cb862bfb08f3",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 11, 583, DateTimeKind.Unspecified).AddTicks(690), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2002, 12, 10),
                            Email = "melhelaly43@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mohamed",
                            Gender = "Male",
                            LastName = "Ehab",
                            LockoutEnabled = false,
                            NormalizedEmail = "MELHELALY43@GMAIL.COM",
                            NormalizedUserName = "MEMO@2002",
                            PasswordHash = "AQAAAAIAAYagAAAAEOyINEU2Pvrd1Umxvz+McbPWpYJkRLhPZ7WNDXSb13ToyiXmuVBds9YKewCES9VHow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f17d5f3a-7641-4cd1-8ad8-4acc3fc782ef",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "memo@2002"
                        },
                        new
                        {
                            Id = "3EB45CDA-F2EE-43E7-B9F1-D52562E05929",
                            AccessFailedCount = 0,
                            Bio = "Loves hiking and photography.",
                            ConcurrencyStamp = "205e0bc6-f73d-41de-876a-1df6669df066",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 11, 684, DateTimeKind.Unspecified).AddTicks(2315), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1990, 5, 15),
                            Email = "johndoe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            Gender = "Male",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHNDOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHNDOE@123",
                            PasswordHash = "AQAAAAIAAYagAAAAEE0qyWamshS57MNZF2hdLVi83OWf0fpQFIa3V4xoXhaOyKhW5p6CejTWsAmagKRcqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e00e2d7f-77d1-4ba7-9c90-656e3d355aa4",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "JohnDoe@123"
                        },
                        new
                        {
                            Id = "9818FAE0-A167-4808-A30D-BC7418A53CB0",
                            AccessFailedCount = 0,
                            Bio = "Passionate about art and design.",
                            ConcurrencyStamp = "e8fe6612-5920-434f-bdd9-2ec50859859f",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 11, 789, DateTimeKind.Unspecified).AddTicks(2922), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1985, 8, 22),
                            Email = "janesmith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            Gender = "Female",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANESMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANESMITH@456",
                            PasswordHash = "AQAAAAIAAYagAAAAEOA0Go67852SDWkFMMOJB01zxsDTGBcUqe6xuW6pZKxGdjjadl4VWVYUW4m6ZfRoag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e01132dd-449f-4cec-8e42-82df4e7e25fe",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "JaneSmith@456"
                        },
                        new
                        {
                            Id = "FE2FB445-6562-49DD-B0A3-77E0A3A1C376",
                            AccessFailedCount = 0,
                            Bio = "Travel enthusiast and foodie.",
                            ConcurrencyStamp = "c834c9e5-dfcb-4fe2-81db-a3ecc0a12fbc",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 11, 883, DateTimeKind.Unspecified).AddTicks(9437), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1995, 3, 10),
                            Email = "alicej@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            Gender = "Female",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICEJ@EXAMPLE.COM",
                            NormalizedUserName = "ALICEJ@789",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/XovSop49hHe7fX55xv/ejMfgHg/zWOLgWR30/8BFSLLVZul6wAqKey/NT0w30TA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6743080f-6945-4ffc-937f-1c3565cfca82",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "AliceJ@789"
                        },
                        new
                        {
                            Id = "0821819C-64AE-4C73-96F2-4E607AA59D7E",
                            AccessFailedCount = 0,
                            Bio = "Tech entrepreneur and mentor.",
                            ConcurrencyStamp = "d59abb28-4578-43ab-b64b-a76dfb6d20c7",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 11, 979, DateTimeKind.Unspecified).AddTicks(9143), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1980, 12, 5),
                            Email = "bobbrown@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            Gender = "Male",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOBBROWN@EXAMPLE.COM",
                            NormalizedUserName = "BOBBROWN@101",
                            PasswordHash = "AQAAAAIAAYagAAAAEAVvuyihWBsfjtJ+Oa+X1LR9sEmBTqonLrZT8S+T794HGpix0IVPeA3uxJSDp77P0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "634ecd94-e992-4f9e-a315-e9af4007a044",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "BobBrown@101"
                        },
                        new
                        {
                            Id = "5B91855C-2D98-4E2B-B919-CDE322C9002D",
                            AccessFailedCount = 0,
                            Bio = "Fitness trainer and health coach.",
                            ConcurrencyStamp = "4ced2144-5d1d-42ae-91a1-3f2c3d0c04cf",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 12, 89, DateTimeKind.Unspecified).AddTicks(3435), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1992, 7, 18),
                            Email = "emilyd@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emily",
                            Gender = "Female",
                            LastName = "Davis",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMILYD@EXAMPLE.COM",
                            NormalizedUserName = "EMILYD@202",
                            PasswordHash = "AQAAAAIAAYagAAAAEJn5Xo+R7oGFOoap0FzsKwt0GT49PqeXr/2mAJUpIKjLE5bojnOcwkpxx5GM1zIrOQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a763326-77f1-46cb-9400-28129c63de4e",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "EmilyD@202"
                        },
                        new
                        {
                            Id = "5326BB55-A26F-47FE-ABC4-9DF44F7B0333",
                            AccessFailedCount = 0,
                            Bio = "Musician and songwriter.",
                            ConcurrencyStamp = "19070a19-f07c-4b86-8480-c5c770b8b4e1",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 12, 185, DateTimeKind.Unspecified).AddTicks(8569), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1988, 9, 25),
                            Email = "michaelw@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            Gender = "Male",
                            LastName = "Wilson",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAELW@EXAMPLE.COM",
                            NormalizedUserName = "MICHAELW@303",
                            PasswordHash = "AQAAAAIAAYagAAAAELCFJCRaKKCSq1rVHQ99g76jJ9oMKF9gkTnZZaZuxULuMuPqrTul2iSNK27Rysd5Qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "309aae62-f5d2-4be1-9008-a462fe28b1f1",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "MichaelW@303"
                        },
                        new
                        {
                            Id = "B3945AB7-1F46-4829-9DEA-6860E283582F",
                            AccessFailedCount = 0,
                            Bio = "Book lover and aspiring writer.",
                            ConcurrencyStamp = "89584b3d-5f02-4c05-93aa-3744dc0cb87b",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 12, 278, DateTimeKind.Unspecified).AddTicks(6837), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1998, 4, 30),
                            Email = "sarahm@example.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            Gender = "Female",
                            LastName = "Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAHM@EXAMPLE.COM",
                            NormalizedUserName = "SARAHM@404",
                            PasswordHash = "AQAAAAIAAYagAAAAEKSoV9wdGGLlBn2xCPrIxO5cOTtULUAxkprD1YmnBhFvLSa5b2Gb/2ZMorEKaoUV+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f42b38c-bade-4e07-b24a-c642419f7dd5",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "SarahM@404"
                        },
                        new
                        {
                            Id = "3944C201-0184-4F97-83A6-B6E4852C961F",
                            AccessFailedCount = 0,
                            Bio = "History buff and teacher.",
                            ConcurrencyStamp = "6858a8bf-cb5e-4d77-ba7c-c2893435337b",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 12, 371, DateTimeKind.Unspecified).AddTicks(6338), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1975, 11, 12),
                            Email = "davidm@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            Gender = "Male",
                            LastName = "Moore",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVIDM@EXAMPLE.COM",
                            NormalizedUserName = "DAVIDM@505",
                            PasswordHash = "AQAAAAIAAYagAAAAEIzvW5NfxiAQlqIro6jZ8bL7gpKxU+fvm26RcxfoIgxh54gdjYtf364EJ7Dy2fyV3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "119a79fe-20c1-4078-b3be-5127fce9b646",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "DavidM@505"
                        },
                        new
                        {
                            Id = "0A9232F3-BC6D-4610-AAFF-F1032831E847",
                            AccessFailedCount = 0,
                            Bio = "Nature lover and environmentalist.",
                            ConcurrencyStamp = "bc0292c6-e58c-4db7-af66-6d0376ce6feb",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 12, 476, DateTimeKind.Unspecified).AddTicks(9720), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1990, 6, 20),
                            Email = "laurat@example.com",
                            EmailConfirmed = true,
                            FirstName = "Laura",
                            Gender = "Female",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            NormalizedEmail = "LAURAT@EXAMPLE.COM",
                            NormalizedUserName = "LAURAT@606",
                            PasswordHash = "AQAAAAIAAYagAAAAEEeDCve8zGwd6f+KKdNRDPhC7uOlN4IILY5FbruAdazdtsyQtp3ansMvFtevyxuUvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ce138c9-8979-45b1-9d04-ee42164f626b",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "LauraT@606"
                        },
                        new
                        {
                            Id = "049759F5-3AD8-46BF-89EE-AC51F3BEED88",
                            AccessFailedCount = 0,
                            Bio = "Gamer and tech enthusiast.",
                            ConcurrencyStamp = "0262d249-044c-492a-86bd-ad23499c010f",
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 4, 12, 12, 12, 12, 585, DateTimeKind.Unspecified).AddTicks(9390), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfBirth = new DateOnly(1985, 2, 14),
                            Email = "chrisa@example.com",
                            EmailConfirmed = true,
                            FirstName = "Chris",
                            Gender = "Male",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHRISA@EXAMPLE.COM",
                            NormalizedUserName = "CHRISA@707",
                            PasswordHash = "AQAAAAIAAYagAAAAEMM/V9pUdLj3zXk1KbOJ3tCfcAbSgb/7qfzCx94Fl3G57CymzkiyyqmSSzm802ze6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d36d3f3-1ea9-435e-a679-003bf6c79631",
                            TimeZoneId = "Egypt Standard Time",
                            TwoFactorEnabled = false,
                            UserName = "ChrisA@707"
                        });
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Identity.TrustedDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BrowserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BrowserVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OsName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OsPlatform")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OsVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TrustedDevices", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.JoinGroupRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RequestorId");

                    b.ToTable("JoinGroupRequests", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.LiveStream", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsLive")
                        .HasColumnType("boolean");

                    b.Property<string>("RecordingUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ViewerCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LiveStreams");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ReadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageMention", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("MentionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MentionedUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MentionedUserId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageMentions", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReactions", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageReply", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OriginalMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentReplyId")
                        .HasColumnType("uuid");

                    b.Property<string>("RepliedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReplyStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("OriginalMessageId");

                    b.HasIndex("ParentReplyId");

                    b.HasIndex("RepliedById");

                    b.ToTable("MessageReplies", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ActionUrl")
                        .HasColumnType("text");

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NKind")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<DateTimeOffset?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Notifications", (string)null);

                    b.HasDiscriminator<string>("NKind").HasValue("Notification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Feeling")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OriginalPostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Privacy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SharesCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OriginalPostId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PostMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AssetId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostMedia", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PostReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ReactedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReactedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReactedById");

                    b.ToTable("PostReactions", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PostTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaggedUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TaggedUserId");

                    b.ToTable("PostTags", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Story", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<string>("StoryPrivacy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoryType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR(5)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stories", (string)null);

                    b.HasDiscriminator<string>("StoryType").HasValue("Story");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTimeOffset>("CommentedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CommentedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentedById");

                    b.HasIndex("StoryId");

                    b.ToTable("StoryComment");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ReactedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReactedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReactedById");

                    b.HasIndex("StoryId");

                    b.ToTable("StoryReaction");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("StoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ViewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ViewerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ViewerId");

                    b.HasIndex("StoryId", "ViewerId")
                        .IsUnique();

                    b.ToTable("StoryViews", (string)null);
                });

            modelBuilder.Entity("Sociam.Domain.Entities.UserFollower", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("FollowedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FollowedUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FollowerUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FollowedUserId");

                    b.HasIndex("FollowerUserId");

                    b.ToTable("UserFollowers");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.GroupConversation", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Conversation");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("Group");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PrivateConversation", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Conversation");

                    b.Property<string>("ReceiverUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId", "ReceiverUserId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Private");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.GroupNotification", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Notification");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupRole")
                        .HasColumnType("text");

                    b.HasIndex("GroupId");

                    b.HasDiscriminator().HasValue("group");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MediaNotification", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Notification");

                    b.Property<Guid>("MediaId")
                        .HasColumnType("uuid");

                    b.Property<string>("MediaNotificationType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("MediaId");

                    b.HasDiscriminator().HasValue("media");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.NetworkNotification", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Notification");

                    b.HasDiscriminator().HasValue("network");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PostNotification", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Notification");

                    b.Property<string>("PostContent")
                        .HasColumnType("text");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("post");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryNotification", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Notification");

                    b.Property<string>("Privacy")
                        .HasColumnType("text");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoryId");

                    b.HasDiscriminator().HasValue("story");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MediaStory", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Story");

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MediaType")
                        .HasColumnType("text");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("media");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.TextStory", b =>
                {
                    b.HasBaseType("Sociam.Domain.Entities.Story");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("HashTags")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("text");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Friendship", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Receiver")
                        .WithMany("FriendshipsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Requester")
                        .WithMany("FriendshipsRequested")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Group", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", null)
                        .WithMany("GroupsCreated")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "CreatedByUser")
                        .WithOne()
                        .HasForeignKey("Sociam.Domain.Entities.Group", "CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.GroupMember", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "AddedBy")
                        .WithOne()
                        .HasForeignKey("Sociam.Domain.Entities.GroupMember", "AddedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("Sociam.Domain.Entities.GroupMember", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddedBy");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.OwnsMany("Sociam.Domain.Entities.Identity.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset>("ExpiresOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTimeOffset?>("RevokedOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Identity.TrustedDevice", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("TrustedDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.JoinGroupRequest", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Group", "Group")
                        .WithMany("JoinGroupRequests")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Requestor")
                        .WithMany("JoinGroupRequests")
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.LiveStream", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("LiveStreams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Message", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageMention", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "MentionedUser")
                        .WithMany()
                        .HasForeignKey("MentionedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Message", "Message")
                        .WithMany("Mentions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentionedUser");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageReaction", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageReply", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Message", "OriginalMessage")
                        .WithMany("Replies")
                        .HasForeignKey("OriginalMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.MessageReply", "ParentReply")
                        .WithMany("ChildReplies")
                        .HasForeignKey("ParentReplyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "RepliedBy")
                        .WithMany()
                        .HasForeignKey("RepliedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OriginalMessage");

                    b.Navigation("ParentReply");

                    b.Navigation("RepliedBy");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Post", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany("Posts")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Post", "OriginalPost")
                        .WithMany()
                        .HasForeignKey("OriginalPostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Sociam.Domain.Entities.PostLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text")
                                .HasColumnName("City");

                            b1.Property<string>("Country")
                                .HasColumnType("text")
                                .HasColumnName("Country");

                            b1.Property<string>("Latitude")
                                .HasColumnType("text")
                                .HasColumnName("Latitude");

                            b1.Property<string>("Longitude")
                                .HasColumnType("text")
                                .HasColumnName("Longitude");

                            b1.HasKey("PostId");

                            b1.ToTable("Posts");

                            b1.WithOwner()
                                .HasForeignKey("PostId");
                        });

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("OriginalPost");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PostComment", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.PostComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sociam.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PostMedia", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Post", "Post")
                        .WithMany("Media")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PostReaction", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "ReactedBy")
                        .WithMany()
                        .HasForeignKey("ReactedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("ReactedBy");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PostTag", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "TaggedUser")
                        .WithMany()
                        .HasForeignKey("TaggedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("TaggedUser");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Story", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "User")
                        .WithMany("Stories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryComment", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "CommentedBy")
                        .WithMany()
                        .HasForeignKey("CommentedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Story", "Story")
                        .WithMany("StoryComments")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentedBy");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryReaction", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "ReactedBy")
                        .WithMany()
                        .HasForeignKey("ReactedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Story", "Story")
                        .WithMany("StoryReactions")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReactedBy");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.StoryView", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Story", "Story")
                        .WithMany("StoryViewers")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "Viewer")
                        .WithMany("ViewedStories")
                        .HasForeignKey("ViewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("Viewer");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.UserFollower", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "FollowedUser")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "FollowerUser")
                        .WithMany("Following")
                        .HasForeignKey("FollowerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowedUser");

                    b.Navigation("FollowerUser");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.GroupConversation", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Group", "Group")
                        .WithMany("GroupConversations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PrivateConversation", b =>
                {
                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "ReceiverUser")
                        .WithMany("PrivateConversationsReceived")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Sociam.Domain.Entities.Identity.ApplicationUser", "SenderUser")
                        .WithMany("PrivateConversationsSent")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupConversations");

                    b.Navigation("JoinGroupRequests");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("FriendshipsReceived");

                    b.Navigation("FriendshipsRequested");

                    b.Navigation("GroupsCreated");

                    b.Navigation("JoinGroupRequests");

                    b.Navigation("LiveStreams");

                    b.Navigation("MessagesSent");

                    b.Navigation("Posts");

                    b.Navigation("PrivateConversationsReceived");

                    b.Navigation("PrivateConversationsSent");

                    b.Navigation("Stories");

                    b.Navigation("TrustedDevices");

                    b.Navigation("ViewedStories");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Mentions");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.MessageReply", b =>
                {
                    b.Navigation("ChildReplies");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Media");

                    b.Navigation("Reactions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.PostComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Sociam.Domain.Entities.Story", b =>
                {
                    b.Navigation("StoryComments");

                    b.Navigation("StoryReactions");

                    b.Navigation("StoryViewers");
                });
#pragma warning restore 612, 618
        }
    }
}
